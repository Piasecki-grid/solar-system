name: Solar System Workflow



on:
  push:
    branches:
      - main
      - 'feature-branch'
  workflow_dispatch:

env:
  MONGO_URI: 'mongodb+srv://supercluster.d83jj.mongodb.net/superData'
  MONGO_USERNAME: ${{ vars.MONGO_USERNAME }}
  MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }}

jobs:
  unit-testing:
    runs-on: ${{ matrix.operating_system }} 
    services:
      mongo:
        image: siddharth67/mongo-db:non-prod
        ports:
          - 27017:27017
    env:
      MONGO_URI: 'mongodb://localhost:27017/superData'
      MONGO_USERNAME: non-prod-user
      MONGO_PASSWORD: non-prod-password 
    strategy:
      matrix:
        node_version: [18]
        operating_system: [ubuntu-latest, macos-latest]
        exclude:
          - node_version: 18
            operating_system: macos-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
      - name: Install npm
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node_versions }}
      - name: Cache node modules
        id: cache-npm
        uses: actions/cache@v4
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: node_modules # albo npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('package-lock.json') }}
      - name: Install dependencies
        run: npm install

      - name: Unit tests
        run: npm test
      - name: Archiving test report
        uses: actions/upload-artifact@v4
        with:
          name: my-unit-tests-${{ strategy.job-index }}
          path: test-results.xml
  test-coverage:
    runs-on: ubuntu-latest
    container:
      image: node:18
    services:
      mongo:
        image: siddharth67/mongo-db:non-prod
        ports:
          - 27017:27017
        options:
          --name mongo
    env:
      MONGO_URI: 'mongodb://mongo:27017/superData'
      MONGO_USERNAME: non-prod-user
      MONGO_PASSWORD: non-prod-password 
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        #- name: Install npm
        #uses: actions/setup-node@v4
        #with:
        #  node-version: ${{ matrix.node_versions }}
        #  cache: 'npm'

      - name: Install dependencies
        run: npm install 

      - name: Coverage
        run: npm run coverage
        continue-on-error: true
      - name: Archiving test report
        uses: actions/upload-artifact@v4
        with:
          name: my-test-coverage-${{ strategy.job-index }}
          path: coverage/
  docker:
    needs: [test-coverage, unit-testing]
    runs-on: ubuntu-latest
    continue-on-error: true
    permissions:
      packages: write
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
      - name: login to dockerhub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: login to ghcr
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: docker build
        uses: docker/build-push-action@v6
        with:
          push: false
          tags: |
            ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}
            ${{ github.repository_owner }}/solar-system:${{ github.sha }}
          
      - name: docker push to dockerhub
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}

      - name: docker push to ghcr
        continue-on-error: true
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: ghcr.io/${{ github.repository_owner }}/solar-system:${{ github.sha }}
  dev-deploy:
    needs: [docker]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
      - name: install kubectl
        uses: azure/steup-kubectl@v4
        with:
          version: 'v1.26.0'
      - uses: azure/k8s-set-context@v4
        with:
           method: kubeconfig
           kubeconfig: ${{ secrets.KUBECONFIG }} 
      - name: checking if k8s works
        run: |
          echo '-------------'
          kubectl get pods
          echo '-------------'
